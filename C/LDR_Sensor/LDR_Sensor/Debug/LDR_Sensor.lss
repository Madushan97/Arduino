
LDR_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b4  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f4  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
    DDRB = DDRB | 0b00000001;		// config PB0 as output
  80:	20 9a       	sbi	0x04, 0	; 4
	DDRC = DDRC & 0b11111110;		// config PC0 as input
  82:	38 98       	cbi	0x07, 0	; 7
	
	ADMUX = (ADMUX & 0b01111111) | 0b01000000;		// reference voltage to 5V
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	8f 73       	andi	r24, 0x3F	; 63
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	ADMUX = ADMUX & 0b11111000;		// multiplex PC0 as analog input channel ADC0
  90:	80 81       	ld	r24, Z
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | 0b00000111;		// select prescale as F_CPU/128
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0b10000000;		// ADC enable
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0b00001000;		// enable ADC interrupt
  a6:	80 81       	ld	r24, Z
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	80 83       	st	Z, r24
	
	sei();
  ac:	78 94       	sei
	ADCSRA = ADCSRA | 0b01000000;		// start ADC	
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x34>

000000b6 <__vector_21>:
    {
    }
	return 0;
}

ISR(ADC_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	float vIn = ADCW * 5.0 / 1024;
  d8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  dc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	
	if(vIn > 1){
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 a1 00 	call	0x142	; 0x142 <__floatunsisf>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 ea       	ldi	r20, 0xA0	; 160
  ee:	50 e4       	ldi	r21, 0x40	; 64
  f0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__mulsf3>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e8       	ldi	r20, 0x80	; 128
  fa:	5a e3       	ldi	r21, 0x3A	; 58
  fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__mulsf3>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e8       	ldi	r20, 0x80	; 128
 106:	5f e3       	ldi	r21, 0x3F	; 63
 108:	0e 94 de 00 	call	0x1bc	; 0x1bc <__gesf2>
 10c:	18 16       	cp	r1, r24
 10e:	14 f4       	brge	.+4      	; 0x114 <__vector_21+0x5e>
		PORTB = PORTB & 0b11111110;		// turn off the led
 110:	28 98       	cbi	0x05, 0	; 5
 112:	01 c0       	rjmp	.+2      	; 0x116 <__vector_21+0x60>
	} else{
		PORTB = PORTB | 0b00000001;		// turn on the led
 114:	28 9a       	sbi	0x05, 0	; 5
	}
	ADCSRA = ADCSRA | 0b01000000;		// restart ADC
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__floatunsisf>:
 142:	e8 94       	clt
 144:	09 c0       	rjmp	.+18     	; 0x158 <__floatsisf+0x12>

00000146 <__floatsisf>:
 146:	97 fb       	bst	r25, 7
 148:	3e f4       	brtc	.+14     	; 0x158 <__floatsisf+0x12>
 14a:	90 95       	com	r25
 14c:	80 95       	com	r24
 14e:	70 95       	com	r23
 150:	61 95       	neg	r22
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	8f 4f       	sbci	r24, 0xFF	; 255
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	99 23       	and	r25, r25
 15a:	a9 f0       	breq	.+42     	; 0x186 <__floatsisf+0x40>
 15c:	f9 2f       	mov	r31, r25
 15e:	96 e9       	ldi	r25, 0x96	; 150
 160:	bb 27       	eor	r27, r27
 162:	93 95       	inc	r25
 164:	f6 95       	lsr	r31
 166:	87 95       	ror	r24
 168:	77 95       	ror	r23
 16a:	67 95       	ror	r22
 16c:	b7 95       	ror	r27
 16e:	f1 11       	cpse	r31, r1
 170:	f8 cf       	rjmp	.-16     	; 0x162 <__floatsisf+0x1c>
 172:	fa f4       	brpl	.+62     	; 0x1b2 <__floatsisf+0x6c>
 174:	bb 0f       	add	r27, r27
 176:	11 f4       	brne	.+4      	; 0x17c <__floatsisf+0x36>
 178:	60 ff       	sbrs	r22, 0
 17a:	1b c0       	rjmp	.+54     	; 0x1b2 <__floatsisf+0x6c>
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	8f 4f       	sbci	r24, 0xFF	; 255
 182:	9f 4f       	sbci	r25, 0xFF	; 255
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatsisf+0x6c>
 186:	88 23       	and	r24, r24
 188:	11 f0       	breq	.+4      	; 0x18e <__floatsisf+0x48>
 18a:	96 e9       	ldi	r25, 0x96	; 150
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <__floatsisf+0x6a>
 18e:	77 23       	and	r23, r23
 190:	21 f0       	breq	.+8      	; 0x19a <__floatsisf+0x54>
 192:	9e e8       	ldi	r25, 0x8E	; 142
 194:	87 2f       	mov	r24, r23
 196:	76 2f       	mov	r23, r22
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__floatsisf+0x5e>
 19a:	66 23       	and	r22, r22
 19c:	71 f0       	breq	.+28     	; 0x1ba <__floatsisf+0x74>
 19e:	96 e8       	ldi	r25, 0x86	; 134
 1a0:	86 2f       	mov	r24, r22
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	2a f0       	brmi	.+10     	; 0x1b2 <__floatsisf+0x6c>
 1a8:	9a 95       	dec	r25
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	88 1f       	adc	r24, r24
 1b0:	da f7       	brpl	.-10     	; 0x1a8 <__floatsisf+0x62>
 1b2:	88 0f       	add	r24, r24
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	97 f9       	bld	r25, 7
 1ba:	08 95       	ret

000001bc <__gesf2>:
 1bc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fp_cmp>
 1c0:	08 f4       	brcc	.+2      	; 0x1c4 <__gesf2+0x8>
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	08 95       	ret

000001c6 <__mulsf3>:
 1c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__mulsf3x>
 1ca:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_round>
 1ce:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_pscA>
 1d2:	38 f0       	brcs	.+14     	; 0x1e2 <__mulsf3+0x1c>
 1d4:	0e 94 84 01 	call	0x308	; 0x308 <__fp_pscB>
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__mulsf3+0x1c>
 1da:	95 23       	and	r25, r21
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <__mulsf3+0x1c>
 1de:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__fp_inf>
 1e2:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__fp_nan>
 1e6:	11 24       	eor	r1, r1
 1e8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_szero>

000001ec <__mulsf3x>:
 1ec:	0e 94 9c 01 	call	0x338	; 0x338 <__fp_split3>
 1f0:	70 f3       	brcs	.-36     	; 0x1ce <__mulsf3+0x8>

000001f2 <__mulsf3_pse>:
 1f2:	95 9f       	mul	r25, r21
 1f4:	c1 f3       	breq	.-16     	; 0x1e6 <__mulsf3+0x20>
 1f6:	95 0f       	add	r25, r21
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	55 1f       	adc	r21, r21
 1fc:	62 9f       	mul	r22, r18
 1fe:	f0 01       	movw	r30, r0
 200:	72 9f       	mul	r23, r18
 202:	bb 27       	eor	r27, r27
 204:	f0 0d       	add	r31, r0
 206:	b1 1d       	adc	r27, r1
 208:	63 9f       	mul	r22, r19
 20a:	aa 27       	eor	r26, r26
 20c:	f0 0d       	add	r31, r0
 20e:	b1 1d       	adc	r27, r1
 210:	aa 1f       	adc	r26, r26
 212:	64 9f       	mul	r22, r20
 214:	66 27       	eor	r22, r22
 216:	b0 0d       	add	r27, r0
 218:	a1 1d       	adc	r26, r1
 21a:	66 1f       	adc	r22, r22
 21c:	82 9f       	mul	r24, r18
 21e:	22 27       	eor	r18, r18
 220:	b0 0d       	add	r27, r0
 222:	a1 1d       	adc	r26, r1
 224:	62 1f       	adc	r22, r18
 226:	73 9f       	mul	r23, r19
 228:	b0 0d       	add	r27, r0
 22a:	a1 1d       	adc	r26, r1
 22c:	62 1f       	adc	r22, r18
 22e:	83 9f       	mul	r24, r19
 230:	a0 0d       	add	r26, r0
 232:	61 1d       	adc	r22, r1
 234:	22 1f       	adc	r18, r18
 236:	74 9f       	mul	r23, r20
 238:	33 27       	eor	r19, r19
 23a:	a0 0d       	add	r26, r0
 23c:	61 1d       	adc	r22, r1
 23e:	23 1f       	adc	r18, r19
 240:	84 9f       	mul	r24, r20
 242:	60 0d       	add	r22, r0
 244:	21 1d       	adc	r18, r1
 246:	82 2f       	mov	r24, r18
 248:	76 2f       	mov	r23, r22
 24a:	6a 2f       	mov	r22, r26
 24c:	11 24       	eor	r1, r1
 24e:	9f 57       	subi	r25, 0x7F	; 127
 250:	50 40       	sbci	r21, 0x00	; 0
 252:	9a f0       	brmi	.+38     	; 0x27a <__mulsf3_pse+0x88>
 254:	f1 f0       	breq	.+60     	; 0x292 <__mulsf3_pse+0xa0>
 256:	88 23       	and	r24, r24
 258:	4a f0       	brmi	.+18     	; 0x26c <__mulsf3_pse+0x7a>
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	bb 1f       	adc	r27, r27
 260:	66 1f       	adc	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	88 1f       	adc	r24, r24
 266:	91 50       	subi	r25, 0x01	; 1
 268:	50 40       	sbci	r21, 0x00	; 0
 26a:	a9 f7       	brne	.-22     	; 0x256 <__mulsf3_pse+0x64>
 26c:	9e 3f       	cpi	r25, 0xFE	; 254
 26e:	51 05       	cpc	r21, r1
 270:	80 f0       	brcs	.+32     	; 0x292 <__mulsf3_pse+0xa0>
 272:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__fp_inf>
 276:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_szero>
 27a:	5f 3f       	cpi	r21, 0xFF	; 255
 27c:	e4 f3       	brlt	.-8      	; 0x276 <__mulsf3_pse+0x84>
 27e:	98 3e       	cpi	r25, 0xE8	; 232
 280:	d4 f3       	brlt	.-12     	; 0x276 <__mulsf3_pse+0x84>
 282:	86 95       	lsr	r24
 284:	77 95       	ror	r23
 286:	67 95       	ror	r22
 288:	b7 95       	ror	r27
 28a:	f7 95       	ror	r31
 28c:	e7 95       	ror	r30
 28e:	9f 5f       	subi	r25, 0xFF	; 255
 290:	c1 f7       	brne	.-16     	; 0x282 <__mulsf3_pse+0x90>
 292:	fe 2b       	or	r31, r30
 294:	88 0f       	add	r24, r24
 296:	91 1d       	adc	r25, r1
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	97 f9       	bld	r25, 7
 29e:	08 95       	ret

000002a0 <__fp_cmp>:
 2a0:	99 0f       	add	r25, r25
 2a2:	00 08       	sbc	r0, r0
 2a4:	55 0f       	add	r21, r21
 2a6:	aa 0b       	sbc	r26, r26
 2a8:	e0 e8       	ldi	r30, 0x80	; 128
 2aa:	fe ef       	ldi	r31, 0xFE	; 254
 2ac:	16 16       	cp	r1, r22
 2ae:	17 06       	cpc	r1, r23
 2b0:	e8 07       	cpc	r30, r24
 2b2:	f9 07       	cpc	r31, r25
 2b4:	c0 f0       	brcs	.+48     	; 0x2e6 <__fp_cmp+0x46>
 2b6:	12 16       	cp	r1, r18
 2b8:	13 06       	cpc	r1, r19
 2ba:	e4 07       	cpc	r30, r20
 2bc:	f5 07       	cpc	r31, r21
 2be:	98 f0       	brcs	.+38     	; 0x2e6 <__fp_cmp+0x46>
 2c0:	62 1b       	sub	r22, r18
 2c2:	73 0b       	sbc	r23, r19
 2c4:	84 0b       	sbc	r24, r20
 2c6:	95 0b       	sbc	r25, r21
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <__fp_cmp+0x38>
 2ca:	0a 26       	eor	r0, r26
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <__fp_cmp+0x46>
 2ce:	23 2b       	or	r18, r19
 2d0:	24 2b       	or	r18, r20
 2d2:	25 2b       	or	r18, r21
 2d4:	21 f4       	brne	.+8      	; 0x2de <__fp_cmp+0x3e>
 2d6:	08 95       	ret
 2d8:	0a 26       	eor	r0, r26
 2da:	09 f4       	brne	.+2      	; 0x2de <__fp_cmp+0x3e>
 2dc:	a1 40       	sbci	r26, 0x01	; 1
 2de:	a6 95       	lsr	r26
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	81 1d       	adc	r24, r1
 2e4:	81 1d       	adc	r24, r1
 2e6:	08 95       	ret

000002e8 <__fp_inf>:
 2e8:	97 f9       	bld	r25, 7
 2ea:	9f 67       	ori	r25, 0x7F	; 127
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <__fp_nan>:
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	08 95       	ret

000002fa <__fp_pscA>:
 2fa:	00 24       	eor	r0, r0
 2fc:	0a 94       	dec	r0
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	18 06       	cpc	r1, r24
 304:	09 06       	cpc	r0, r25
 306:	08 95       	ret

00000308 <__fp_pscB>:
 308:	00 24       	eor	r0, r0
 30a:	0a 94       	dec	r0
 30c:	12 16       	cp	r1, r18
 30e:	13 06       	cpc	r1, r19
 310:	14 06       	cpc	r1, r20
 312:	05 06       	cpc	r0, r21
 314:	08 95       	ret

00000316 <__fp_round>:
 316:	09 2e       	mov	r0, r25
 318:	03 94       	inc	r0
 31a:	00 0c       	add	r0, r0
 31c:	11 f4       	brne	.+4      	; 0x322 <__fp_round+0xc>
 31e:	88 23       	and	r24, r24
 320:	52 f0       	brmi	.+20     	; 0x336 <__fp_round+0x20>
 322:	bb 0f       	add	r27, r27
 324:	40 f4       	brcc	.+16     	; 0x336 <__fp_round+0x20>
 326:	bf 2b       	or	r27, r31
 328:	11 f4       	brne	.+4      	; 0x32e <__fp_round+0x18>
 32a:	60 ff       	sbrs	r22, 0
 32c:	04 c0       	rjmp	.+8      	; 0x336 <__fp_round+0x20>
 32e:	6f 5f       	subi	r22, 0xFF	; 255
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	08 95       	ret

00000338 <__fp_split3>:
 338:	57 fd       	sbrc	r21, 7
 33a:	90 58       	subi	r25, 0x80	; 128
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	59 f0       	breq	.+22     	; 0x358 <__fp_splitA+0x10>
 342:	5f 3f       	cpi	r21, 0xFF	; 255
 344:	71 f0       	breq	.+28     	; 0x362 <__fp_splitA+0x1a>
 346:	47 95       	ror	r20

00000348 <__fp_splitA>:
 348:	88 0f       	add	r24, r24
 34a:	97 fb       	bst	r25, 7
 34c:	99 1f       	adc	r25, r25
 34e:	61 f0       	breq	.+24     	; 0x368 <__fp_splitA+0x20>
 350:	9f 3f       	cpi	r25, 0xFF	; 255
 352:	79 f0       	breq	.+30     	; 0x372 <__fp_splitA+0x2a>
 354:	87 95       	ror	r24
 356:	08 95       	ret
 358:	12 16       	cp	r1, r18
 35a:	13 06       	cpc	r1, r19
 35c:	14 06       	cpc	r1, r20
 35e:	55 1f       	adc	r21, r21
 360:	f2 cf       	rjmp	.-28     	; 0x346 <__fp_split3+0xe>
 362:	46 95       	lsr	r20
 364:	f1 df       	rcall	.-30     	; 0x348 <__fp_splitA>
 366:	08 c0       	rjmp	.+16     	; 0x378 <__fp_splitA+0x30>
 368:	16 16       	cp	r1, r22
 36a:	17 06       	cpc	r1, r23
 36c:	18 06       	cpc	r1, r24
 36e:	99 1f       	adc	r25, r25
 370:	f1 cf       	rjmp	.-30     	; 0x354 <__fp_splitA+0xc>
 372:	86 95       	lsr	r24
 374:	71 05       	cpc	r23, r1
 376:	61 05       	cpc	r22, r1
 378:	08 94       	sec
 37a:	08 95       	ret

0000037c <__fp_zero>:
 37c:	e8 94       	clt

0000037e <__fp_szero>:
 37e:	bb 27       	eor	r27, r27
 380:	66 27       	eor	r22, r22
 382:	77 27       	eor	r23, r23
 384:	cb 01       	movw	r24, r22
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
