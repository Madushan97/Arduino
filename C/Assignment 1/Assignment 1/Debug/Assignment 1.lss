
Assignment 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d6  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016c  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL	// define cpu clock speed for delay.h
#include <util/delay.h>		// include delay.h()

int main(void)
{
   DDRB = DDRB | 0b00011111 ;		//define pb0 to pb5 as output
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	84 b9       	out	0x04, r24	; 4
  
    while (1) 
    {
		for(int i=0;i<=4;i++){
			PORTB = PORTB ^ (1<<i);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	70 e0       	ldi	r23, 0x00	; 0
{
   DDRB = DDRB | 0b00011111 ;		//define pb0 to pb5 as output
  
    while (1) 
    {
		for(int i=0;i<=4;i++){
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = PORTB ^ (1<<i);
  8e:	45 b1       	in	r20, 0x05	; 5
  90:	9b 01       	movw	r18, r22
  92:	08 2e       	mov	r0, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x1a>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <main+0x16>
  9e:	34 2f       	mov	r19, r20
  a0:	32 27       	eor	r19, r18
  a2:	35 b9       	out	0x05, r19	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	4f ef       	ldi	r20, 0xFF	; 255
  a6:	51 ee       	ldi	r21, 0xE1	; 225
  a8:	e4 e0       	ldi	r30, 0x04	; 4
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	50 40       	sbci	r21, 0x00	; 0
  ae:	e0 40       	sbci	r30, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
			_delay_ms(100);
			PORTB = PORTB & ~(1<<(i));
  b6:	35 b1       	in	r19, 0x05	; 5
  b8:	20 95       	com	r18
  ba:	23 23       	and	r18, r19
  bc:	25 b9       	out	0x05, r18	; 5
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	31 ee       	ldi	r19, 0xE1	; 225
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
			_delay_ms(100);
			if(i==4){
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 05       	cpc	r25, r1
  d4:	31 f5       	brne	.+76     	; 0x122 <main+0xa2>
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	90 e0       	ldi	r25, 0x00	; 0
				for (int j=4;j>=0;j--)
				{
					PORTB = PORTB ^ (1<<j);
  da:	45 b1       	in	r20, 0x05	; 5
  dc:	9b 01       	movw	r18, r22
  de:	08 2e       	mov	r0, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x66>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x62>
  ea:	34 2f       	mov	r19, r20
  ec:	32 27       	eor	r19, r18
  ee:	35 b9       	out	0x05, r19	; 5
  f0:	5f ef       	ldi	r21, 0xFF	; 255
  f2:	e1 ee       	ldi	r30, 0xE1	; 225
  f4:	44 e0       	ldi	r20, 0x04	; 4
  f6:	51 50       	subi	r21, 0x01	; 1
  f8:	e0 40       	sbci	r30, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
					_delay_ms(100);
					PORTB = PORTB & ~(1<<(j));
 102:	35 b1       	in	r19, 0x05	; 5
 104:	20 95       	com	r18
 106:	23 23       	and	r18, r19
 108:	25 b9       	out	0x05, r18	; 5
 10a:	5f ef       	ldi	r21, 0xFF	; 255
 10c:	e1 ee       	ldi	r30, 0xE1	; 225
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	51 50       	subi	r21, 0x01	; 1
 112:	e0 40       	sbci	r30, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x90>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x9a>
 11a:	00 00       	nop
			PORTB = PORTB ^ (1<<i);
			_delay_ms(100);
			PORTB = PORTB & ~(1<<(i));
			_delay_ms(100);
			if(i==4){
				for (int j=4;j>=0;j--)
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	e8 f6       	brcc	.-70     	; 0xda <main+0x5a>
 120:	b4 cf       	rjmp	.-152    	; 0x8a <main+0xa>
{
   DDRB = DDRB | 0b00011111 ;		//define pb0 to pb5 as output
  
    while (1) 
    {
		for(int i=0;i<=4;i++){
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	85 30       	cpi	r24, 0x05	; 5
 126:	91 05       	cpc	r25, r1
 128:	09 f0       	breq	.+2      	; 0x12c <main+0xac>
 12a:	b1 cf       	rjmp	.-158    	; 0x8e <main+0xe>
 12c:	ae cf       	rjmp	.-164    	; 0x8a <main+0xa>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
